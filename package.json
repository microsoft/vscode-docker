{
  "name": "vscode-docker",
  "version": "0.1.0",
  "publisher": "PeterJausovec",
  "displayName": "Docker",
  "description": "Adds syntax highlighting, commands, hover tips, and linting for Dockerfile and docker-compose files.",
  "license": "SEE LICENSE IN LICENSE.md",
  "icon": "images/docker_icon.png",
  "aiKey": "AIF-d9b70cd4-b9f9-4d70-929b-a071c400b217",
  "galleryBanner": {
    "color": "#1289B9",
    "theme": "dark"
  },
  "categories": [
    "Programming Languages",
    "Linters",
    "Azure"
  ],
  "keywords": [
    "docker",
    "compose",
    "container",
    "multi-root ready"
  ],
  "repository": {
    "url": "https://github.com/microsoft/vscode-docker.git"
  },
  "homepage": "https://github.com/Microsoft/vscode-docker/blob/master/README.md",
  "activationEvents": [
    "onLanguage:dockerfile",
    "onLanguage:yaml",
    "onCommand:vscode-docker.image.build",
    "onCommand:vscode-docker.image.inspect",
    "onCommand:vscode-docker.image.remove",
    "onCommand:vscode-docker.image.push",
    "onCommand:vscode-docker.image.tag",
    "onCommand:vscode-docker.container.start",
    "onCommand:vscode-docker.container.start.interactive",
    "onCommand:vscode-docker.container.start.azurecli",
    "onCommand:vscode-docker.container.stop",
    "onCommand:vscode-docker.container.restart",
    "onCommand:vscode-docker.container.show-logs",
    "onCommand:vscode-docker.container.open-shell",
    "onCommand:vscode-docker.compose.up",
    "onCommand:vscode-docker.compose.down",
    "onCommand:vscode-docker.compose.restart",
    "onCommand:vscode-docker.configure",
    "onCommand:vscode-docker.createWebApp",
    "onCommand:vscode-docker.system.prune",
    "onCommand:vscode-docker.dockerHubLogout",
    "onCommand:vscode-docker.browseDockerHub",
    "onCommand:vscode-docker.browseAzurePortal",
    "onCommand:vscode-docker.explorer.refresh",
    "onView:dockerExplorer",
    "onDebugInitialConfigurations"
  ],
  "main": "./out/dockerExtension",
  "contributes": {
    "menus": {
      "commandPalette": [
        {
          "command": "vscode-docker.browseDockerHub",
          "when": "false"
        },
        {
          "command": "vscode-docker.createWebApp",
          "when": "false"
        }
      ],
      "editor/context": [
        {
          "when": "editorLangId == dockerfile",
          "command": "vscode-docker.image.build",
          "group": "docker"
        },
        {
          "when": "resourceFilename == docker-compose.yml",
          "command": "vscode-docker.compose.up",
          "group": "docker"
        },
        {
          "when": "resourceFilename == docker-compose.yml",
          "command": "vscode-docker.compose.down",
          "group": "docker"
        },
        {
          "when": "resourceFilename == docker-compose.yml",
          "command": "vscode-docker.compose.restart",
          "group": "docker"
        },
        {
          "when": "resourceFilename == docker-compose.debug.yml",
          "command": "vscode-docker.compose.up",
          "group": "docker"
        },
        {
          "when": "resourceFilename == docker-compose.debug.yml",
          "command": "vscode-docker.compose.down",
          "group": "docker"
        },
        {
          "when": "resourceFilename == docker-compose.debug.yml",
          "command": "vscode-docker.compose.restart",
          "group": "docker"
        }
      ],
      "explorer/context": [
        {
          "when": "resourceFilename =~ /[dD]ocker[fF]ile/",
          "command": "vscode-docker.image.build",
          "group": "docker"
        },
        {
          "when": "resourceFilename =~ /[dD]ocker-[cC]ompose/",
          "command": "vscode-docker.compose.up",
          "group": "docker"
        },
        {
          "when": "resourceFilename =~ /[dD]ocker-[cC]ompose/",
          "command": "vscode-docker.compose.down",
          "group": "docker"
        },
        {
          "when": "resourceFilename =~ /[dD]ocker-[cC]ompose/",
          "command": "vscode-docker.compose.restart",
          "group": "docker"
        }
      ],
      "view/title": [
        {
          "command": "vscode-docker.explorer.refresh",
          "when": "view == dockerExplorer",
          "group": "navigation"
        },
        {
          "command": "vscode-docker.system.prune",
          "when": "view == dockerExplorer",
          "group": "navigation"
        }
      ],
      "view/item/context": [
        {
          "command": "vscode-docker.container.start",
          "when": "view == dockerExplorer && viewItem == localImageNode"
        },
        {
          "command": "vscode-docker.container.start",
          "when": "view == dockerExplorer && viewItem == imagesRootNode"
        },
        {
          "command": "vscode-docker.container.start.interactive",
          "when": "view == dockerExplorer && viewItem == localImageNode"
        },
        {
          "command": "vscode-docker.container.start.interactive",
          "when": "view == dockerExplorer && viewItem == imagesRootNode"
        },
        {
          "command": "vscode-docker.image.push",
          "when": "view == dockerExplorer && viewItem == localImageNode"
        },
        {
          "command": "vscode-docker.image.push",
          "when": "view == dockerExplorer && viewItem == imagesRootNode"
        },
        {
          "command": "vscode-docker.image.remove",
          "when": "view == dockerExplorer && viewItem == localImageNode"
        },
        {
          "command": "vscode-docker.image.remove",
          "when": "view == dockerExplorer && viewItem == imagesRootNode"
        },
        {
          "command": "vscode-docker.image.inspect",
          "when": "view == dockerExplorer && viewItem == localImageNode"
        },
        {
          "command": "vscode-docker.image.inspect",
          "when": "view == dockerExplorer && viewItem == imagesRootNode"
        },
        {
          "command": "vscode-docker.image.tag",
          "when": "view == dockerExplorer && viewItem == localImageNode"
        },
        {
          "command": "vscode-docker.image.tag",
          "when": "view == dockerExplorer && viewItem == imagesRootNode"
        },
        {
          "command": "vscode-docker.container.stop",
          "when": "view == dockerExplorer && viewItem == runningLocalContainerNode"
        },
        {
          "command": "vscode-docker.container.stop",
          "when": "view == dockerExplorer && viewItem == containersRootNode"
        },
        {
          "command": "vscode-docker.container.restart",
          "when": "view == dockerExplorer && viewItem == runningLocalContainerNode"
        },
        {
          "command": "vscode-docker.container.restart",
          "when": "view == dockerExplorer && viewItem == stoppedLocalContainerNode"
        },
        {
          "command": "vscode-docker.container.restart",
          "when": "view == dockerExplorer && viewItem == containersRootNode"
        },
        {
          "command": "vscode-docker.container.show-logs",
          "when": "view == dockerExplorer && viewItem == runningLocalContainerNode"
        },
        {
          "command": "vscode-docker.container.show-logs",
          "when": "view == dockerExplorer && viewItem == stoppedLocalContainerNode"
        },
        {
          "command": "vscode-docker.container.show-logs",
          "when": "view == dockerExplorer && viewItem == containersRootNode"
        },
        {
          "command": "vscode-docker.container.open-shell",
          "when": "view == dockerExplorer && viewItem == runningLocalContainerNode"
        },
        {
          "command": "vscode-docker.container.open-shell",
          "when": "view == dockerExplorer && viewItem == containersRootNode"
        },
        {
          "command": "vscode-docker.container.remove",
          "when": "view == dockerExplorer && viewItem == stoppedLocalContainerNode"
        },
        {
          "command": "vscode-docker.container.remove",
          "when": "view == dockerExplorer && viewItem == runningLocalContainerNode"
        },
        {
          "command": "vscode-docker.container.remove",
          "when": "view == dockerExplorer && viewItem == containersRootNode"
        },
        {
          "command": "vscode-docker.createWebApp",
          "when": "view == dockerExplorer && viewItem == azureImageNode"
        },
        {
          "command": "vscode-docker.createWebApp",
          "when": "view == dockerExplorer && viewItem == dockerHubImageTag"
        },
        {
          "command": "vscode-docker.dockerHubLogout",
          "when": "view == dockerExplorer && viewItem == dockerHubRootNode"
        },
        {
          "command": "vscode-docker.browseDockerHub",
          "when": "view == dockerExplorer && viewItem == dockerHubImageTag"
        },
        {
          "command": "vscode-docker.browseDockerHub",
          "when": "view == dockerExplorer && viewItem == dockerHubRepository"
        },
        {
          "command": "vscode-docker.browseDockerHub",
          "when": "view == dockerExplorer && viewItem == dockerHubNamespace"
        },
        {
          "command": "vscode-docker.browseAzurePortal",
          "when": "view == dockerExplorer && viewItem == azureRegistryNode"
        },
        {
          "command": "vscode-docker.browseAzurePortal",
          "when": "view == dockerExplorer && viewItem == azureRepositoryNode"
        },
        {
          "command": "vscode-docker.browseAzurePortal",
          "when": "view == dockerExplorer && viewItem == azureImageNode"
        }
      ]
    },
    "debuggers": [
      {
        "type": "docker",
        "label": "Docker",
        "configurationSnippets": [
          {
            "label": "Docker: Attach to Node",
            "description": "Docker: Attach to Node",
            "body": {
              "type": "node",
              "request": "attach",
              "name": "Docker: Attach to Node",
              "port": 9229,
              "address": "localhost",
              "localRoot": "^\"\\${workspaceFolder}\"",
              "remoteRoot": "/usr/src/app",
              "protocol": "inspector"
            }
          }
        ]
      }
    ],
    "languages": [
      {
        "id": "dockerfile",
        "aliases": [
          "Dockerfile"
        ],
        "filenamePatterns": [
          "*.dockerfile",
          "Dockerfile"
        ]
      }
    ],
    "configuration": {
      "type": "object",
      "title": "Docker configuration options",
      "properties": {
        "docker.defaultRegistry": {
          "type": "string",
          "default": "",
          "description": "Default registry when tagging an image, empty string will target Docker Hub when pushing."
        },
        "docker.defaultRegistryPath": {
          "type": "string",
          "default": "",
          "description": "Path within registry to push to."
        },
        "docker.showExplorer": {
          "type": "boolean",
          "default": true,
          "description": "Show or hide the Explorer."
        },
        "docker.explorerRefreshInterval": {
          "type": "number",
          "default": 1000,
          "description": "Explorer refresh interval, default is 1000ms."
        },
        "docker.imageBuildContextPath": {
          "type": "string",
          "default": "",
          "description": "Build context PATH to pass to Docker build command."
        },
        "docker.truncateLongRegistryPaths": {
          "type": "boolean",
          "default": false,
          "description": "Truncate long Image and Container registry paths in the Explorer."
        },
        "docker.truncateMaxLength": {
          "type": "number",
          "default": 10,
          "description": "Maximum number of characters for long registry paths in the Explorer, including elipsis."
        },
        "docker.host": {
          "type": "string",
          "default": "",
          "description": "Host to connect to (same as setting the DOCKER_HOST environment variable)"
        },
        "docker.languageserver.diagnostics.deprecatedMaintainer": {
          "scope": "resource",
          "type": "string",
          "default": "warning",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "description": "Controls the diagnostic severity for the deprecated MAINTAINER instruction."
        },
        "docker.languageserver.diagnostics.emptyContinuationLine": {
          "scope": "resource",
          "type": "string",
          "default": "warning",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "description": "Controls the diagnostic severity for flagging empty continuation lines found in instructions that span multiple lines."
        },
        "docker.languageserver.diagnostics.directiveCasing": {
          "scope": "resource",
          "type": "string",
          "default": "warning",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "description": "Controls the diagnostic severity for parser directives that are not written in lowercase."
        },
        "docker.languageserver.diagnostics.instructionCasing": {
          "scope": "resource",
          "type": "string",
          "default": "warning",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "description": "Controls the diagnostic severity for instructions that are not written in uppercase."
        },
        "docker.languageserver.diagnostics.instructionCmdMultiple": {
          "scope": "resource",
          "type": "string",
          "default": "warning",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "description": "Controls the diagnostic severity for flagging a Dockerfile with multiple CMD instructions."
        },
        "docker.languageserver.diagnostics.instructionEntrypointMultiple": {
          "scope": "resource",
          "type": "string",
          "default": "warning",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "description": "Controls the diagnostic severity for flagging a Dockerfile with multiple ENTRYPOINT instructions."
        },
        "docker.languageserver.diagnostics.instructionHealthcheckMultiple": {
          "scope": "resource",
          "type": "string",
          "default": "warning",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "description": "Controls the diagnostic severity for flagging a Dockerfile with multiple HEALTHCHECK instructions."
        },
        "docker.languageserver.diagnostics.instructionJSONInSingleQuotes": {
          "scope": "resource",
          "type": "string",
          "default": "warning",
          "enum": [
            "ignore",
            "warning",
            "error"
          ],
          "description": "Controls the diagnostic severity for JSON instructions that are written incorrectly with single quotes."
        },
        "docker.attachShellCommand.linuxContainer": {
          "type": "string",
          "default": "/bin/sh",
          "description": "Attach command to use for Linux containers"
        },
        "docker.attachShellCommand.windowsContainer": {
          "type": "string",
          "default": "powershell",
          "description": "Attach command to use for Windows containers"
        },
        "docker.promptOnSystemPrune": {
          "type": "boolean",
          "default": true,
          "description": "Prompt for confirmation when running System Prune command"
        },
        "docker.dockerComposeBuild": {
          "type": "boolean",
          "default": true,
          "description": "Run docker-compose with the --build argument, defaults to true"
        },
        "docker.dockerComposeDetached": {
          "type": "boolean",
          "default": true,
          "description": "Run docker-compose with the --d (detached) argument, defaults to true"
        }
      }
    },
    "commands": [
      {
        "command": "vscode-docker.configure",
        "title": "Add Docker files to Workspace",
        "description": "Add Dockerfile, docker-compose.yml files",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.image.build",
        "title": "Build Image",
        "description": "Build a Docker image from a Dockerfile",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.image.inspect",
        "title": "Inspect Image",
        "description": "Inspect the metadata of a Docker image",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.image.remove",
        "title": "Remove Image",
        "description": "Remove a Docker image",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.image.tag",
        "title": "Tag Image",
        "description": "Tag a Docker image",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.container.start",
        "title": "Run",
        "description": "Starts a container from an image",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.container.start.interactive",
        "title": "Run Interactive",
        "description": "Starts a container from an image and runs it interactively",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.container.start.azurecli",
        "title": "Azure CLI",
        "description": "Starts a container from the Azure CLI image and runs it interactively",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.container.stop",
        "title": "Stop Container",
        "description": "Stop a running container",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.container.restart",
        "title": "Restart Container",
        "description": "Restart one or more containers",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.container.remove",
        "title": "Remove Container",
        "description": "Remove a stopped container",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.container.show-logs",
        "title": "Show Logs",
        "description": "Show the logs of a running container",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.container.open-shell",
        "title": "Attach Shell",
        "description": "Open a terminal with an interactive shell for a running container",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.compose.up",
        "title": "Compose Up",
        "description": "Starts a composition of containers",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.compose.down",
        "title": "Compose Down",
        "description": "Stops a composition of containers",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.compose.restart",
        "title": "Compose Restart",
        "description": "Restarts a composition of containers",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.image.push",
        "title": "Push",
        "description": "Push an image to a registry",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.system.prune",
        "title": "System Prune",
        "category": "Docker",
        "icon": {
          "light": "images/light/prune.svg",
          "dark": "images/dark/prune.svg"
        }
      },
      {
        "command": "vscode-docker.explorer.refresh",
        "title": "Refresh Explorer",
        "category": "Docker",
        "icon": {
          "light": "images/light/refresh.svg",
          "dark": "images/dark/refresh.svg"
        }
      },
      {
        "command": "vscode-docker.createWebApp",
        "title": "Deploy Image to Azure App Service",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.dockerHubLogout",
        "title": "Docker Hub Logout",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.browseDockerHub",
        "title": "Browse in Docker Hub",
        "category": "Docker"
      },
      {
        "command": "vscode-docker.browseAzurePortal",
        "title": "Browse in the Azure Portal",
        "category": "Docker"
      }
    ],
    "views": {
      "dockerView": [
        {
          "id": "dockerExplorer",
          "name": "Explorer",
          "when": "config.docker.showExplorer == true"
        }
      ]
    },
    "viewsContainers": {
      "activitybar": [
        {
          "icon": "images/docker.svg",
          "id": "dockerView",
          "title": "Docker"
        }
      ]
    }
  },
  "engines": {
    "vscode": "^1.23.0"
  },
  "scripts": {
    "vscode:prepublish": "tsc -p ./",
    "build": "tsc -p ./",
    "compile": "tsc -watch -p ./",
    "lint": "tslint --project tsconfig.json -t verbose",
    "lint-fix": "tslint --project tsconfig.json -t verbose --fix",
    "postinstall": "node ./node_modules/vscode/bin/install",
    "test": "npm run build && cross-env CODE_TESTS_WORKSPACE=./test/test.code-workspace node ./node_modules/vscode/bin/test",
    "all": "npm i && npm run lint && npm test"
  },
  "extensionDependencies": [
    "vscode.docker",
    "vscode.yaml"
  ],
  "devDependencies": {
    "@types/fs-extra": "^5.0.4",
    "@types/glob": "5.0.35",
    "@types/keytar": "^4.0.1",
    "@types/mocha": "^5.2.5",
    "@types/node": "^8.0.34",
    "@types/request-promise": "^4.1.42",
    "azure-storage": "^2.8.1",
    "cross-env": "^5.2.0",
    "gulp": "^3.9.1",
    "mocha": "5.2.0",
    "tslint": "^5.11.0",
    "tslint-microsoft-contrib": "5.0.1",
    "typescript": "^2.1.5",
    "vsce": "^1.37.5",
    "vscode": "^1.0.0"
  },
  "dependencies": {
    "azure-arm-containerregistry": "^2.3.0",
    "azure-arm-resource": "^2.0.0-preview",
    "azure-arm-website": "^1.0.0-preview",
    "docker-hub-api": "^0.6.0",
    "dockerfile-language-server-nodejs": "^0.0.18",
    "dockerode": "^2.5.1",
    "fs-extra": "^6.0.1",
    "glob": "7.1.2",
    "gradle-to-js": "^1.0.1",
    "moment": "^2.19.3",
    "opn": "^5.1.0",
    "pom-parser": "^1.1.1",
    "reqclient": "^2.4.0",
    "request-promise": "^4.2.2",
    "vscode-azureextensionui": "~0.15.0",
    "vscode-extension-telemetry": "^0.0.6",
    "vscode-languageclient": "4.3.0"
  }
}
